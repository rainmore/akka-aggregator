akka {
    version = 2.4.0
    loglevel = INFO
    stdout-loglevel = INFO
    event-handlers = ["akka.event.Logging$DefaultLogger"]

    log-dead-letters = 0
    log-dead-letters-during-shutdown = off

    actor {
        provider = "akka.cluster.ClusterActorRefProvider"
    }

    remote {
        enabled-transports = ["akka.remote.netty.tcp"]
        log-remote-lifecycle-events = off
        netty.tcp {
            hostname = "127.0.0.1"
            hostname = ${?HOST}
            port = "2551"
            port = ${?PORT}
        }
    }

    cluster {
        metrics.enabled=off

        seed-nodes = [
            # "akka.tcp://clusters@127.0.0.1:2553",
            "akka.tcp://clusters@127.0.0.1:2551",
            "akka.tcp://clusters@127.0.0.1:2552"
        ]

        roles = ["seed"]

        # min-nr-of-members = 1

        role {
            # allow the cluster start with only one seed actor
            seed.min-nr-of-members = 1
            #master.min-nr-of-members = 1
        }

        auto-down-unreachable-after = 10s

        failure-detector {
            # recommended for EC2
            threshold = 12
            acceptable-heartbeat-pause = 3
        }

        singleton {
            # The actor name of the child singleton actor.
            singleton-name = "singleton"

            # Singleton among the nodes tagged with specified role.
            # If the role is not specified it's a singleton among all nodes in the cluster.
            role = "master"

            # When a node is becoming oldest it sends hand-over request to previous oldest,
            # that might be leaving the cluster. This is retried with this interval until
            # the previous oldest confirms that the hand over has started or the previous
            # oldest member is removed from the cluster (+ akka.cluster.down-removal-margin).
            hand-over-retry-interval = 1s

            # The number of retries are derived from hand-over-retry-interval and
            # akka.cluster.down-removal-margin (or ClusterSingletonManagerSettings.removalMargin),
            # but it will never be less than this property.
            min-number-of-hand-over-retries = 10
        }

        singleton-proxy {
            # The actor name of the singleton actor that is started by the ClusterSingletonManager
            singleton-name = ${akka.cluster.singleton.singleton-name}

            # The role of the cluster nodes where the singleton can be deployed.
            # If the role is not specified then any node will do.
            role = "master"

            # Interval at which the proxy will try to resolve the singleton instance.
            singleton-identification-interval = 1s

            # If the location of the singleton is unknown the proxy will buffer this
            # number of messages and deliver them when the singleton is identified.
            # When the buffer is full old messages will be dropped when new messages are
            # sent via the proxy.
            # Use 0 to disable buffering, i.e. messages will be dropped immediately if
            # the location of the singleton is unknown.
            # Maximum allowed buffer size is 10000.
            buffer-size = 1000
        }
    }
}
